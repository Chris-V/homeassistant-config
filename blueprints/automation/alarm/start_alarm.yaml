blueprint:
  name: Start an alarm
  domain: automation
  input:
    actions:
      name: Quick actions available with the notification.
      description: >
        Accepts an array of objects in the shape of `{title: string, action: string}`
      selector:
        object: {}
      default: ~
    group:
      name: Sensor group.
      description: Binary sensor group that will start the alarm once it turns on.
      selector:
        entity:
          filter:
            - domain: binary_sensor
    name:
      name: Name of the thing this alarm handles.
      selector:
        text: {}
    silenced:
      name: Silenced condition
      description: Optional condition to determine if the audio broadcast is silenced.
      selector:
        condition: {}
      default:
        - condition: template
          value_template: "{{ false }}"
    tag:
      name: An optional tag to identify this notification.
      default: ""
      selector:
        template: {}

initial_state: true
max_exceeded: "silent"
mode: "single"

triggers:
  - trigger: "homeassistant"
    event: "start"
  - trigger: "state"
    entity_id: !input group
    to: "on"

variables:
  name: !input name
  group: !input group
  tag: !input tag

conditions:
  - condition: state
    entity_id: !input group
    state: "on"

actions:
  - parallel:
      - action: python_script.notify
        data:
          audio: false
          dismissible: false
          persistent: true
          priority: true
          push_target: "household"
          push_actions: !input actions
          tag: "alarm_{{ name | slugify }}_{{ tag | slugify }}"
          title: "{{ name | capitalize }} detected"
          url: "/lovelace/security"
          message: &alarm_message >
            {% from 'strings.jinja' import nice_join %}
            {%
              set locations = expand(state_attr(group, 'entity_id') | default([], True))
                | selectattr('state', '!=', 'off')
                | map(attribute = 'entity_id')
                | map('area_name')
                | unique | sort
            %}
            {{ name | capitalize }} detected{% if locations | count > 0 %} in {{ nice_join(locations) }}{% endif %}.

      - repeat:
          while:
            - condition: state
              entity_id: !input group
              state: "on"
          sequence:
            - if: !input silenced
              then:
                - action: "script.broadcast_notification"
                  data:
                    message: *alarm_message
            - delay: 10
