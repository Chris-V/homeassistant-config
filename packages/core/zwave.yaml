input_select:
  ozw_nodes:
    name: "OZW nodes"
    options:
      - "No nodes available. Add a node and refresh."

input_number:
  ozw_node_id:
    name: "OZW node ID"
    min: 2
    max: 254
    mode: "box"

# TODO: Check that it can trigger on every reboot, otherwise make it so. ie:
#   - platform: state
#     entity_id: "binary_sensor.ozw_network_ready"
#     to: "on"
binary_sensor:
  - platform: mqtt
    name: "ozw_network_ready"
    device_class: "connectivity"
    state_topic: &network_status_topic "OpenZWave/1/status/"
    value_template: >
      {{ "ON" if value_json.Status in ["driverAwakeNodesQueried", "driverAllNodesQueriedSomeDead", "driverAllNodesQueried"] else "OFF" }}
    json_attributes_topic: *network_status_topic
  - platform: mqtt
    name: "ozw_dead_nodes"
    device_class: "problem"
    state_topic: *network_status_topic
    value_template: >
      {{ "ON" if value_json.Status == "driverAllNodesQueriedSomeDead" else "OFF" }}
    json_attributes_topic: *network_status_topic

sensor:
  - platform: mqtt
    name: "ozw_network_notification"
    state_topic: &notification_topic "OpenZWave/1/event/notification/"
    value_template: "{{ value_json.Event }}"
    json_attributes_topic: *notification_topic

script:
  send_ozw_node_command:
    alias: "Send OZW node command"
    icon: "mdi:refresh"
    mode: "single"
    fields:
      zw_command:
        description: "The name of the command to send on OZW's topic."
        example: "refreshnodeinfo"
    sequence:
      - service: mqtt.publish
        data_template:
          topic: "OpenZWave/1/command/{{ zw_command }}/"
          payload: >
            {{ { 'node': states('input_number.ozw_node_id') | int | string } | to_json }}

automation:
  - alias: "Refresh OZW node list"
    initial_state: true
    mode: "single"
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.ozw_network_ready"
    action:
      - service: input_select.set_options
        data:
          entity_id: "input_select.ozw_nodes"
          options: >
            {%- set ns = namespace(options = []) %}
            {%- set nodes = states
                  | selectattr('attributes.node_id')
                  | sort(attribute = 'attributes.node_id,name')
                  | unique(attribute = 'attributes.node_id')
                  | list %}

            {%- for node in nodes %}
              {%- set option = '{}. {}'.format(
                    node.attributes.node_id,
                    node.attributes.friendly_name,
                  ) %}
              {%- set ns.options = ns.options + [option] %}
            {%- endfor %}

            {{ ns.options if ns.options | length else ['No nodes available. Add a node and refresh.'] }}

  - alias: "Select OZW node ID"
    initial_state: true
    mode: "queued"
    trigger:
      - platform: state
        entity_id: "input_select.ozw_nodes"
    action:
      - service: input_number.set_value
        data:
          entity_id: "input_number.ozw_node_id"
          value: >
            {% set option = trigger.to_state.state | default('', True) -%}
            {{ option.split('.')[0] | int(0) }}

  - alias: "Notify Z-Wave dead nodes"
    mode: "single"
    trigger:
      - platform: state
        entity_id: "binary_sensor.ozw_dead_nodes"
        from: "off"
        to: "on"
    action:
      - service: python_script.notify
        data:
          persistent: true
          push_target: "admin"
          title: "Dead Z-Wave nodes detected"
          url: "/admin-zwave/settings"
