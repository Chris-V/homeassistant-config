notify:
  - platform: html5
    name: "html5"
    vapid_email: !secret notifier_vapid_email
    vapid_pub_key: !secret notifier_vapid_public_key
    vapid_prv_key: !secret notifier_vapid_private_key

  - platform: group
    name: "admin"
    services:
      - service: mobile_app_chris_moto_g7
      - service: html5_chris_aero_arch_chrome

  - platform: group
    name: "household"
    services:
      - service: admin
      - service: mobile_app_karine_pixel_1

tts:
  - platform: google_cloud
    key_file: ".secrets/gcp.json"
    service_name: google_cloud_say
    voice: "en-US-Wavenet-D"  # https://cloud.google.com/text-to-speech/docs/voices
    profiles:
      - "small-bluetooth-speaker-class-device"

# TODO: Could be replaced with a "queued" script + json + notify.file and preserve atomicity
custom_storage:
  broadcast_notifications:
    enable_persistence: true

group:
  broadcast_media_players:
    name: "Broadcast enabled media players"
    icon: "mdi:speaker-multiple"
    all: true
    entities:
      - media_player.laundry_room_google_home
      - media_player.living_room_google_home
      - media_player.lounge_google_home
      - media_player.master_bedroom_google_home
      - media_player.office_sonos

script:
  broadcast_notification:
    alias: "Broadcast notification"
    description: "Synchronize media players and broadcast an audio message."
    mode: "queued"
    max: 25

    fields:
      media_players:
        description: "The media players to play the message on. Defaults to group.broadcast_media_players."
        example: "group.broadcast_media_players"
      message:
        description: "The message to play on the speakers."
        example: "Today is a fine day. Don't forget to charge your phone."
      volume_level:
        description: >
          The volume level to play this message at.
          The previous level will be restored individually on each speaker.
          Defaults to 0.8
        example: "0.8"

    sequence:
      - variables:
          media_players: >-
            {{
              expand(media_players | default('group.broadcast_media_players', True))
                | map(attribute = 'entity_id')
                | list
            }}
          volume_level: "{{ volume_level | default(0.8, True) }}"

      - service: media_player.turn_on
        data:
          entity_id: "{{ media_players }}"
      - wait_template: >-
          {{ expand(media_players) | selectattr('state', '==', 'off') | first is undefined }}
        timeout: 15
        continue_on_timeout: true

      - service: scene.create
        data:
          scene_id: "volume_before_broadcast"
          snapshot_entities: "{{ media_players }}"

      - service: media_player.volume_set
        data:
          entity_id: "{{ media_players }}"
          volume_level: "{{ volume_level }}"
      - delay: 0.75

      - service: tts.google_cloud_say
        data:
          entity_id: "{{ media_players }}"
          message: "{{ message }}"

      - delay: 2.5
      - wait_template: >-
          {{ expand(media_players) | selectattr('state', '==', 'playing') | first is undefined }}
        timeout: 60

      - service: scene.turn_on
        data:
          entity_id: "scene.volume_before_broadcast"

automation:
  - id: "36afcfe6-d475-447c-b089-d33aec62a774"
    alias: "broadcast_notifications"
    initial_state: true
    mode: "queued"
    max: 25

    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: "custom_storage.broadcast_notifications"
      - platform: state
        entity_id: "group.household"
        to: "home"
        for: 120
      - platform: time
        at:
          - &week_trigger_time "08:00:00"
          - &weekend_trigger_time "09:30:00"

    condition:
      - condition: numeric_state
        entity_id: "custom_storage.broadcast_notifications"
        above: 0
      - condition: state
        entity_id: "group.household"
        state: "home"
        for: 120
      - condition: or
        conditions:
          - condition: time
            after: *week_trigger_time
            before: "23:59:59"
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: time
            after: *weekend_trigger_time
            before: "23:59:59"
            weekday:
              - sat
              - sun

    action:
      - service: script.broadcast_notification
        data:
          message: "Attention. {{ state_attr('custom_storage.broadcast_notifications', 'item_0_data') }}"
      - wait_template: "{{ is_state('script.broadcast_notification', 'off') }}"

      - service: custom_storage.remove
        data:
          object_id: "broadcast_notifications"
          id: "{{ state_attr('custom_storage.broadcast_notifications', 'item_0_id') }}"
