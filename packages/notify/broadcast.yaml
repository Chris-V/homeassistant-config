homeassistant:
  customize:
    sensor.broadcast_queue:
      friendly_name: "Broadcast queue"

media_player:
  - platform: "group"
    unique_id: "media_player.broadcast_group"
    name: "Broadcast group"
    entities:
      - "media_player.laundry_room_google_home"
      - "media_player.living_room_google_home"
      - "media_player.lounge_google_home"
      - "media_player.master_bedroom_google_home"
      - "media_player.office_sonos"

input_text:
  broadcast_message:
    name: "Broadcast message"
    icon: "mdi:message-text"
    max: 255
    initial: ""

mqtt:
  sensor:
    - unique_id: "mqtt_broadcast_queue"
      name: "broadcast_queue"
      icon: "mdi:bullhorn"
      state_topic: &broadcast_queue_topic "home-assistant/broadcast/queue"
      value_template: >
        {{ value_json | default([], True) | length }}
      json_attributes_topic: *broadcast_queue_topic
      json_attributes_template: >
        {% set items = value_json | default([], True) %}
        {{ { "items": items } | tojson }}

script:
  broadcast_manual_message:
    alias: "Broadcast manual message"
    description: "Broadcast a custom message."
    icon: "mdi:broadcast"
    mode: "queued"
    sequence:
      - service: "python_script.notify"
        data:
          audio: true
          title: "{{ states('input_text.broadcast_message') }}"

  broadcast_notification:
    alias: "Broadcast notification"
    description: "Synchronize media players and broadcast an audio message."
    icon: "mdi:broadcast"
    mode: "queued"
    max: 25

    fields:
      media_players:
        description: "The media players to play the message on. Defaults to media_player.broadcast_group."
        example: "media_player.broadcast_group"
      message:
        description: "The message to play on the speakers."
        example: "Today is a fine day. Don't forget to charge your phone."
      volume_level:
        description: >
          The volume level to play this message at.
          The previous level will be restored individually on each speaker.
          Defaults to 0.8
        example: "0.8"

    sequence:
      - variables:
          media_players: >-
            {{
              expand(media_players | default('media_player.broadcast_group', True))
                | map(attribute = 'entity_id')
                | list
            }}
          volume_level: "{{ volume_level | default(0.8, True) }}"

      - service: media_player.turn_on
        data:
          entity_id: "{{ media_players }}"
      - wait_template: >-
          {{ expand(media_players) | selectattr('state', '==', 'off') | first is undefined }}
        timeout: 15
        continue_on_timeout: true

      - service: scene.create
        data:
          scene_id: "volume_before_broadcast"
          snapshot_entities: "{{ media_players }}"

      - service: media_player.volume_set
        data:
          entity_id: "{{ media_players }}"
          volume_level: "{{ volume_level }}"
      - delay: 0.75

      - service: tts.google_cloud_say
        data:
          entity_id: "{{ media_players }}"
          message: "{{ message }}"

      - delay: 2.5
      - wait_template: >-
          {{ expand(media_players) | selectattr('state', '==', 'playing') | first is undefined }}
        timeout: 60

      - service: scene.turn_on
        data:
          entity_id: "scene.volume_before_broadcast"

  manage_broadcast_queue:
    alias: "Manage the broadcast queue"
    description: "Manage items in the broadcast queue. Operations are executed in order."
    icon: "mdi:bullhorn"
    mode: "queued"
    max: 25

    fields:
      action:
        name: "Action"
        description: "Action to perform on this queue."
        required: true
        selector:
          select:
            options:
              - "Add"
              - "Clear"
              - "Pop"
      message:
        name: "Message"
        description: "The message to enqueue when action is `add`."
        selector:
          text: null
      tag:
        name: "Tag"
        description: |
          A tag to uniquely identify this message.
          With `action: add`, if a message with the same tag exists, then it will be updated.
          With `action: pop`, if tag is specified, then the corresponding message will be removed. Otherwise the first message will be removed.
        selector:
          text: null

    sequence:
      - variables:
          action: "{{ action | lower }}"
          tag: "{{ tag | default | string | trim }}"
          message: "{{ message | default | string | trim }}"
          items: "{{ state_attr('sensor.broadcast_queue', 'items') | default([], True) | list }}"

      - choose:
          - conditions: "{{ action == 'add' }}"
            sequence:
              - if: "{{ message | length > 0 }}"
                then:
                  - service: "mqtt.publish"
                    data:
                      topic: *broadcast_queue_topic
                      retain: true
                      payload_template: >
                        {%
                          set new_item = {
                            "timestamp": now().isoformat(),
                            "tag": tag or context.id,
                            "data": {
                              "message": message
                            }
                          }
                        %}
                        {{ (items | rejectattr('tag', '==', tag) | list + [new_item]) | to_json }}
                else:
                  - service: "system_log.write"
                    data:
                      level: "error"
                      message: >
                        `script.manage_broadcast_queue` called with `action: add` but `message` is absent.

          - conditions: "{{ action == 'clear' }}"
            sequence:
              - service: "mqtt.publish"
                data:
                  topic: *broadcast_queue_topic
                  retain: true
                  payload: "[]"

          - conditions: "{{ action == 'pop' }}"
            sequence:
              - service: "mqtt.publish"
                data:
                  topic: *broadcast_queue_topic
                  retain: true
                  payload_template: >
                    {% if items | length %}
                      {% if tag %}
                        {{ items | rejectattr('tag', '==', tag) | list | to_json }}
                      {% else %}
                        {% set popped = items.pop(0) %}
                        {{ items | to_json }}
                      {% endif %}
                    {% else %}
                      []
                    {% endif %}

automation:
  - id: "36afcfe6-d475-447c-b089-d33aec62a774"
    alias: "broadcast_notifications"
    initial_state: true
    mode: "queued"
    max: 25

    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: "sensor.broadcast_queue"
        attribute: "items"
      - platform: state
        entity_id: "group.household"
        to: "home"
        for: 120
      - platform: time
        at:
          - &week_trigger_time "08:00:00"
          - &weekend_trigger_time "09:30:00"

    variables:
      item: "{{ state_attr('sensor.broadcast_queue', 'items') | default([], True) | first | default }}"

    condition:
      - "{{ item is mapping }}"
      - condition: state
        entity_id: "group.household"
        state: "home"
        for: 120
      - or:
          - condition: time
            after: *week_trigger_time
            before: "23:59:59"
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: time
            after: *weekend_trigger_time
            before: "23:59:59"
            weekday:
              - sat
              - sun

    action:
      - service: script.broadcast_notification
        data:
          message: "Attention. {{ item.data.message }}"
      - wait_template: "{{ is_state('script.broadcast_notification', 'off') }}"

      - service: script.manage_broadcast_queue
        data:
          action: "pop"
          tag: "{{ item.tag }}"
