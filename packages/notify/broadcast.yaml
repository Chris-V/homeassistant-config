homeassistant:
  customize:
    todo.audio_broadcast:
      friendly_name: "Broadcast queue"
      icon: "mdi:bullhorn"

media_player:
  - platform: "group"
    unique_id: "media_player.broadcast_group"
    name: "Broadcast group"
    entities:
      - "media_player.cast_whole_house"
      - "media_player.office_sonos"

input_text:
  broadcast_message:
    name: "Broadcast message"
    icon: "mdi:bullhorn"
    max: 255
    initial: ""

input_datetime:
  broadcast_weekday_start:
    name: "Weekday broadcast start time"
    icon: "mdi:clock-start"
    has_date: false
    has_time: true
  broadcast_weekday_end:
    name: "Weekday broadcast end time"
    icon: "mdi:clock-end"
    has_date: false
    has_time: true
  broadcast_weekend_start:
    name: "Weekend broadcast start time"
    icon: "mdi:clock-start"
    has_date: false
    has_time: true
  broadcast_weekend_end:
    name: "Weekend broadcast end time"
    icon: "mdi:clock-end"
    has_date: false
    has_time: true

script:
  broadcast_manual_message:
    alias: "Broadcast manual message"
    description: "Broadcast a custom message."
    icon: "mdi:broadcast"
    mode: "queued"
    sequence:
      - service: "script.broadcast_notification"
        data:
          message: "{{ states('input_text.broadcast_message') }}"

  broadcast_notification:
    alias: "Broadcast notification"
    description: "Synchronize media players and broadcast an audio message."
    icon: "mdi:broadcast"
    mode: "queued"
    max: 25

    fields:
      media_players:
        description: "The media players to play the message on. Defaults to media_player.broadcast_group."
        example: "media_player.broadcast_group"
      message:
        description: "The message to play on the speakers."
        example: "Today is a fine day. Don't forget to charge your phone."
      volume_level:
        description: >
          The volume level to play this message at.
          The previous level will be restored individually on each speaker.
          Defaults to 0.8
        example: "0.8"

    sequence:
      - variables:
          media_players: >-
            {{
              expand(media_players | default('media_player.broadcast_group', True))
                | map(attribute = 'entity_id')
                | list
            }}
          volume_level: "{{ volume_level | default(0.8, True) }}"

      - service: media_player.turn_on
        continue_on_error: true
        data:
          # Technically filter by supported_features, but we know the result so less jinja hassle
          # state_attr('...', 'supported_features') | bitwise_and(128) != 0
          entity_id: >
            {{
              expand(media_players)
                | rejectattr('entity_id', '==', 'media_player.office_sonos')
                | map(attribute = 'entity_id')
                | list
            }}
      - wait_template: >-
          {{ expand(media_players) | selectattr('state', '==', 'off') | first is undefined }}
        timeout: 3
        continue_on_timeout: true

      - service: scene.create
        data:
          scene_id: "volume_before_broadcast"
          snapshot_entities: "{{ media_players }}"

      - service: media_player.volume_set
        data:
          entity_id: "{{ media_players }}"
          volume_level: "{{ volume_level }}"
      - delay: 0.75

      - service: tts.google_cloud_say
        data:
          entity_id: "{{ media_players }}"
          message: "{{ message }}"

      - delay: 2.5
      - wait_template: >-
          {{ expand(media_players) | selectattr('state', '==', 'playing') | first is undefined }}
        timeout: 60

      - service: scene.turn_on
        data:
          entity_id: "scene.volume_before_broadcast"

  manage_broadcast_queue:
    alias: "Manage the broadcast queue"
    description: "Manage items in the broadcast queue. Operations are executed in order."
    icon: "mdi:bullhorn"
    mode: "queued"
    max: 25

    fields:
      action:
        name: "Action"
        description: "Action to perform on this queue."
        required: true
        selector:
          select:
            options:
              - "add"
              - "pop"
      message:
        name: "Message"
        description: "The message to enqueue when action is `add`."
        selector:
          text: null
      tag:
        name: "Tag"
        description: |
          A tag to uniquely identify this message.
          With `action: add`, if a message with the same tag exists, update it. Otherwise add a message to the end of the queue.
          With `action: pop`, remove the message with the specified tag from the queue.
        selector:
          text: null

    sequence:
      - variables:
          action: "{{ action | lower }}"
          message: "{{ message | default | string | trim }}"
          tag: >
            {% from 'random.jinja' import random_string %}
            {{ tag | default(random_string()) | string | trim }}

      - choose:
          - conditions: "{{ action == 'add' }}"
            sequence:
              - service: "todo.get_items"
                response_variable: "broadcast_items"
                target:
                  entity_id: "todo.audio_broadcast"
                data:
                  status:
                    - needs_action
              - if: "{{ broadcast_items['todo.audio_broadcast']['items'] | selectattr('summary', '==', tag) | list | length != 0 }}"
                then:
                  - service: "todo.update_item"
                    target:
                      entity_id: "todo.audio_broadcast"
                    data:
                      description: "{{ message }}"
                      item: "{{ tag }}"
                      status: "needs_action"

                else:
                  - service: "todo.add_item"
                    target:
                      entity_id: "todo.audio_broadcast"
                    data:
                      description: "{{ message }}"
                      item: "{{ tag }}"

          - conditions: "{{ action == 'pop' }}"
            sequence:
              - service: "todo.remove_item"
                target:
                  entity_id: "todo.audio_broadcast"
                data:
                  item: "{{ tag }}"

      - service: "todo.remove_completed_items"
        target:
          entity_id: "todo.audio_broadcast"

automation:
  - id: "36afcfe6-d475-447c-b089-d33aec62a774"
    alias: "broadcast_notifications"
    initial_state: true
    mode: "queued"
    max: 25

    trigger:
      - platform: "homeassistant"
        event: "start"
      - platform: "state"
        entity_id: "todo.audio_broadcast"
      - platform: "state"
        entity_id: "group.household"
        to: "home"
        for: 120
      - platform: "time"
        at:
          - "input_datetime.broadcast_weekday_start"
          - "input_datetime.broadcast_weekend_start"

    condition:
      - condition: "numeric_state"
        entity_id: "todo.audio_broadcast"
        above: 0
      - condition: "state"
        entity_id: "group.household"
        state: "home"
        for: 120
      - or:
          - condition: "time"
            after: "input_datetime.broadcast_weekday_start"
            before: "input_datetime.broadcast_weekday_end"
            weekday:
              - mon
              - tue
              - wed
              - thu
          - condition: "time"
            after: "input_datetime.broadcast_weekday_start"
            before: "input_datetime.broadcast_weekend_end"
            weekday:
              - fri
          - condition: "time"
            after: "input_datetime.broadcast_weekend_start"
            before: "input_datetime.broadcast_weekend_end"
            weekday:
              - sat
          - condition: "time"
            after: "input_datetime.broadcast_weekend_start"
            before: "input_datetime.broadcast_weekday_end"
            weekday:
              - sun

    action:
      - service: "todo.get_items"
        response_variable: "broadcast_items"
        target:
          entity_id: "todo.audio_broadcast"
        data:
          status:
            - needs_action

      - variables:
          broadcast_item: "{{ broadcast_items['todo.audio_broadcast']['items'][0] }}"

      - service: script.broadcast_notification
        data:
          message: "{{ broadcast_item['description'] | default(broadcast_item['summary'], true) }}"

      - wait_template: "{{ is_state('script.broadcast_notification', 'off') }}"

      - service: script.manage_broadcast_queue
        data:
          action: "pop"
          tag: "{{ broadcast_item['summary'] }}"
