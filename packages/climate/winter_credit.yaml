# Example messages:
#   `Reminder. Peak demand event - Winter Credit Option: today, Dec. 18, from 6 to 9 a.m.`
#   `Peak demand event notification - Winter Credit Option: tomorrow, Jan. 19, from 4 to 8 p.m.`
#   `Peak demand event notification - Winter Credit Option: tomorrow, Jan. 21, from 6 to 9 a.m. and from 4 to 8 p.m.`

binary_sensor:
  - platform: template
    sensors:
      winter_credit_enabled:
        value_template: >-
          {% set date_sensor = states.sensor.date -%}
          {{
            date_sensor is not none
              and date_sensor.last_changed.month <= 3
              or date_sensor.last_changed.month == 12
          }}
      winter_credit_peak_event:
        value_template: >-
          {% set special_schedule = state_attr('calendar.special_climate_schedule', 'message') | default('', True) -%}
          {{ 'Winter Credit: Peak Event' in special_schedule }}

sensor:
  - platform: template
    sensors:
      winter_credit_baseline_climate_preset:
        unique_id: "sensor.winter_credit_baseline_climate_preset"
        friendly_name: "Winter credit: baseline climate preset"
        icon_template: "mdi:thermometer-lines"
        value_template: >-
          {# TODO: work with actual date-time ranges #}
          {% set delta = 3 %}
          {% set peak_events = [range(6, 9), range(16, 20)] %}

          {% set hour = states('sensor.hour') | int %}
          {% set ns = namespace(preset = '') %}

          {% if is_state('binary_sensor.winter_credit_enabled', 'on') %}
            {% for event in peak_events if not ns.preset %}
              {% if hour in event %}
                {% set ns.preset = 'Winter Credit: Heat' %}
              {% elif hour in range(event[0] - delta, event[0]) %}
                {% set ns.preset = 'Winter Credit: Cool' %}
              {% endif %}
            {% endfor %}
          {% endif %}

          {{ ns.preset }}

automation:
  - alias: "schedule_hydro_peak_event"
    initial_state: true
    mode: "parallel"

    trigger:
      - platform: state
        entity_id: "sensor.chris_moto_g7_last_notification"

    variables:
      text: "{{ trigger.to_state.attributes['android.text'] }}"

    condition:
      - "{{ trigger.to_state.attributes.package == 'com.hydroquebec.mf_android' }}"
      - "{{ 'Winter Credit Option:' in text }}"
      - "{{ 'Reminder.' not in text }}"

    action:
      - variables:
          text: "{{ text | replace('a.m.', 'AM') | replace('p.m.', 'PM') }}"
          pattern: '(?:([a-z]+\.? \d{1,2}), )?from (\d{1,2}(?::\d{2})?)(?: (AM|PM))? to (\d{1,2}(?::\d{2})?)(?: (AM|PM)?)'
          count: "{{ (text | regex_replace(pattern, '___MATCH___', ignorecase = True)).count('___MATCH___') }}"
          events: >
            {% set ns = namespace(day = undefined, events = []) %}

            {% for index in range(count) %}
              {% set match = text | regex_findall_index(pattern, index = index, ignorecase = True) -%}
              {% set ns.day = strptime(match[0] | regex_replace('[^a-zA-Z0-9 ]', ''), '%b %d') | default(ns.day, True) -%}
              {% set start_hour = strptime(
                  match[1]
                    ~ (':00' if ':' not in match[1])
                    ~ ' ' ~ (match[2] or match[4] or 'AM'),
                  '%I:%M %p') -%}
              {% set end_hour = strptime(
                  match[3]
                    ~ (':00' if ':' not in match[3])
                    ~ ' ' ~ (match[4] or match[2] or 'AM'),
                  '%I:%M %p') -%}

              {% if [ns.day, start_hour, end_hour] | select('string') | first is undefined -%}
                {%- set start = ns.day.replace(year = now().year, hour = start_hour.hour, minute = start_hour.minute) -%}
                {%- set end = ns.day.replace(year = now().year, hour = end_hour.hour, minute = end_hour.minute) -%}
                {% set ns.events = ns.events + [{
                  'start': (start - timedelta(hours = 1, minutes = 30)) | as_timestamp | timestamp_local,
                  'end': start | as_timestamp | timestamp_local,
                  'preset': 'Winter Credit: Heat',
                }, {
                  'start': start | as_timestamp | timestamp_local,
                  'end': end | as_timestamp | timestamp_local,
                  'preset': 'Winter Credit: Peak Event',
                }] -%}
              {% endif -%}
            {% endfor %}

            {{ ns.events }}

      - choose:
          - conditions:
              - "{{ count == 0 or count != events | length / 2 }}"
            sequence:
              - service: persistent_notification.create
                data:
                  title: "Failed to parse peak event notification"
                  message: |
                    <strong>{{ text }}</strong>
                    <hr>
                    <pre>{{ events }}</pre>

      - repeat:
          count: "{{ events | length }}"
          sequence:
            - service: google.add_event
              data:
                calendar_id: !secret gcal_climate_id
                summary: "{{ events[repeat.index - 1].preset }} #special"
                description: "{{ text }}"
                start_date_time: "{{ events[repeat.index - 1].start }}"
                end_date_time: "{{ events[repeat.index - 1].end }}"
