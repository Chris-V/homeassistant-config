sensor:
  - platform: template
    sensors:
      scheduled_climate_preset:
        unique_id: "sensor.scheduled_climate_preset"
        friendly_name: "Scheduled climate preset"
        icon_template: "mdi:thermometer-lines"
        value_template: >-
          {% set supported_presets = [
            'Active',
            'Away',
            'Boost',
            'Bedtime',
            'Sleep',
            'Winter Credit: Cool',
            'Winter Credit: Heat',
            'Winter Credit: Peak Event',
          ] -%}
          {% macro parse_calendar_preset(entity_id, default) -%}
            {% if is_state(entity_id, 'on') -%}
              {% set scheduled_preset = state_attr(entity_id, 'message').split('#')[0] | trim -%}
              {{ scheduled_preset if scheduled_preset in supported_presets else default }}
            {% else -%}
              {{ default }}
            {% endif -%}
          {% endmacro %}

          {% set self = 'sensor.scheduled_climate_preset' -%}
          {% set preset = 'Away' -%}
          {% set winter_credit_baseline_preset = states('sensor.winter_credit_baseline_climate_preset') -%}

          {% if winter_credit_baseline_preset in supported_presets %}
            {% set preset = winter_credit_baseline_preset %}
          {% elif is_state('group.household', 'home') -%}
            {% set preset = parse_calendar_preset(
                'calendar.regular_climate_schedule',
                (states[self].state if states[self] else 'Active')
              ) -%}
          {% endif -%}

          {{ parse_calendar_preset('calendar.special_climate_schedule', preset) }}

script:
  assign_climate_auto_mode:
    alias: "Assign auto climate mode"
    mode: "restart"
    fields:
      mode:
        description: "The setpoint mode to assign to all thermostat. One of Boost, Comfort or Eco."
        example: "Comfort"
      exceptions:
        description: "Dictionary of room IDs with their setpoint mode that differ from the default mode."
        example: "{\"my_room\": \"Boost\"}"
    sequence:
      - service: scene.apply
        data:
          entities: >
            {% set ns = namespace(entries = []) %}
            {% for entity_id in expand('group.managed_thermostat_auto_modes') | map(attribute = 'entity_id') %}
              {% set ns.entries = ns.entries + ['"{}": "{}"'.format(entity_id, mode)] %}
            {% endfor %}
            {% for entity_id, override_preset in (exceptions | default({})).items() %}
              {% set ns.entries = ns.entries + ['"input_select.{}_thermostat_auto_mode": "{}"'.format(entity_id, override_preset)] %}
            {% endfor %}
            {{ "{{\n{}\n}}".format(ns.entries | join(',\n')) | from_json }}

  apply_scheduled_climate_preset:
    alias: "Set auto climate modes based on schedule"
    icon: "mdi:thermometer-lines"
    mode: "restart"
    variables:
      preset: "{{ states('sensor.scheduled_climate_preset') | lower }}"
    sequence:
      - choose:
          - conditions: "{{ preset == 'active' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Comfort"
          - conditions: "{{ preset == 'away' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Eco"
                  exceptions:
                    studio: "Comfort"
          - conditions: "{{ preset == 'bedtime' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Eco"
                  exceptions:
                    guest_bedroom: "Comfort"
                    master_bedroom: "Comfort"
                    office: "Comfort"
                    studio: "Comfort"
          - conditions: "{{ preset == 'boost' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Boost"
          - conditions: "{{ preset == 'sleep' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Eco"

          # Winter Credit presets
          - conditions: "{{ preset == 'winter credit: cool' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Eco"
          - conditions: "{{ preset == 'winter credit: heat' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Boost"
          - conditions: "{{ preset == 'winter credit: peak event' }}"
            sequence:
              - service: script.assign_climate_auto_mode
                data:
                  mode: "Eco"

        default:
          - service: "system_log.write"
            data:
              level: "warning"
              message: "Invalid scheduled climate preset: '{{ preset }}'."

automation:
  - id: "fd33012e-1f9a-4205-8c29-3639015bd2ad"
    alias: "apply_scheduled_climate_preset"
    initial_state: true
    mode: "restart"
    trigger:
      - platform: state
        entity_id: "sensor.scheduled_climate_preset"
    condition:
      - "{{ trigger.from_state is not defined or trigger.from_state.state != trigger.to_state.state }}"
    action:
      - service: script.apply_scheduled_climate_preset
