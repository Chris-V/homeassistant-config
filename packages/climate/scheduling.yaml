sensor:
  - platform: template
    sensors:
      scheduled_climate_preset:
        unique_id: "sensor.scheduled_climate_preset"
        friendly_name: "Scheduled climate preset"
        icon_template: "mdi:thermometer-lines"
        value_template: >-
          {% macro parse_calendar_preset(entity_id, default) -%}
            {% set supported_presets = ['Active', 'Away', 'Bedtime', 'Peak Event', 'Sleep'] -%}
            {% if is_state(entity_id, 'on') -%}
              {% set scheduled_preset = state_attr(entity_id, 'message').split('#')[0] | trim -%}
              {{ scheduled_preset if scheduled_preset in supported_presets else default }}
            {% else -%}
              {{ default }}
            {% endif -%}
          {% endmacro %}

          {% set preset = 'Away' -%}
          {% set self = 'sensor.scheduled_climate_preset' -%}

          {% if is_state('group.household', 'home') -%}
            {% set preset = parse_calendar_preset(
                'calendar.regular_climate_schedule',
                (states[self].state if states[self] else 'Active')
              ) -%}
          {% endif -%}

          {{ parse_calendar_preset('calendar.special_climate_schedule', preset) }}

script:
  assign_climate_auto_mode:
    alias: "Assign auto climate mode"
    mode: "restart"
    fields:
      preset:
        description: "The preset to assign to all entities. Either Eco or Comfort."
        example: "Comfort"
      overrides:
        description: "Dictionary of entities and their preset that do not use the default value."
        example: "{\"input_select.my_room_thermostat_auto_mode\": \"Comfort\"}"
    sequence:
      - service: scene.apply
        data:
          entities: >
            {% set ns = namespace(entries = []) %}
            {% for entity_id in expand('group.managed_thermostat_auto_modes') | map(attribute = 'entity_id') %}
              {% set ns.entries = ns.entries + ['"{}": "{}"'.format(entity_id, preset)] %}
            {% endfor %}
            {% for entity_id, override_preset in (overrides | default({})).items() %}
              {% set ns.entries = ns.entries + ['"{}": "{}"'.format(entity_id, override_preset)] %}
            {% endfor %}
            {{ "{{\n{}\n}}".format(ns.entries | join(',\n')) | from_json }}

  apply_active_climate_preset:
    alias: "Set auto climate mode to active"
    icon: "mdi:thermometer-lines"
    mode: "single"
    sequence:
      - service: script.assign_climate_auto_mode
        data:
          preset: "Comfort"

  apply_away_climate_preset:
    alias: "Set auto climate mode to away"
    icon: "mdi:thermometer-lines"
    mode: "single"
    sequence:
      - service: script.assign_climate_auto_mode
        data:
          preset: "Eco"

  apply_bedtime_climate_preset:
    alias: "Set auto climate mode to bedtime"
    icon: "mdi:thermometer-lines"
    mode: "single"
    sequence:
      - service: script.assign_climate_auto_mode
        data:
          preset: "Eco"
          overrides:
            input_select.guest_bedroom_thermostat_auto_mode: "Comfort"
            input_select.master_bedroom_thermostat_auto_mode: "Comfort"
            input_select.office_thermostat_auto_mode: "Comfort"
            input_select.studio_thermostat_auto_mode: "Comfort"

  apply_peak_event_climate_preset:
    alias: "Set auto climate mode to peak event"
    icon: "mdi:thermometer-lines"
    mode: "single"
    sequence:
      - service: script.assign_climate_auto_mode
        data:
          preset: "Eco"

  apply_sleep_climate_preset:
    alias: "Set auto climate mode to sleep"
    icon: "mdi:thermometer-lines"
    mode: "single"
    sequence:
      - service: script.assign_climate_auto_mode
        data:
          preset: "Eco"

  apply_scheduled_climate_preset:
    alias: "Set auto climate modes based on schedule"
    icon: "mdi:thermometer-lines"
    mode: "restart"
    variables:
      preset: "{{ states('sensor.scheduled_climate_preset') | lower | regex_replace('[^a-z]+', '_') }}"
    sequence:
      - service: "script.apply_{{ preset }}_climate_preset"

automation:
  - alias: "apply_scheduled_climate_preset"
    initial_state: true
    mode: "restart"
    trigger:
      - platform: state
        entity_id: "sensor.scheduled_climate_preset"
    condition:
      - "{{ trigger.from_state is not defined or trigger.from_state.state != trigger.to_state.state }}"
    action:
      - service: script.apply_scheduled_climate_preset
