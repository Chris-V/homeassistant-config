homeassistant:
  customize:
    switch.slinky_heat_bulb:
      icon: "mdi:spotlight-beam"
    switch.slinky_heater:
      icon: "mdi:radiator"
    switch.slinky_uv_light:
      icon: "mdi:weather-sunny"
    switch.slinky_outlet_4:
      icon: "mdi:power-socket-us"
    switch.slinky_outlet_5:
      icon: "mdi:chip"

input_boolean:
  slinky_scheduled_lights:
    name: "Automate Slinky's terrarium"
    icon: "mdi:home-automation"

input_datetime:
  slinky_day_time:
    name: Time at which Slinky's terrarium lights turn on
    has_date: false
    has_time: true
  slinky_night_time:
    name: Time at which Slinky's terrarium lights turn off
    has_date: false
    has_time: true

binary_sensor:
  - platform: template
    sensors:
      slinky_requires_attention:
        unique_id: "binary_sensor.slinky_requires_attention"
        friendly_name: "Slinky requires attention"
        device_class: "problem"
        entity_picture_template: "/local/animals/slinky_avatar.jpg"
        attribute_templates:
          scheduling: "{{ is_state('input_boolean.slinky_scheduled_lights', 'on') }}"
          heat_bulb: "{{ is_state('switch.slinky_heat_bulb', 'off') or states('sensor.slinky_heat_bulb_power') | float > 1 }}"
          heater: "{{ is_state('switch.slinky_heater', 'off') or states('sensor.slinky_heater_power') | float > 1 }}"
          uv_light: "{{ is_state('switch.slinky_uv_light', 'off') or states('sensor.slinky_uv_light_power') | float > 1 }}"
        value_template: >-
          {{ is_state('input_boolean.slinky_scheduled_lights', 'off')
              or (is_state('switch.slinky_heat_bulb', 'on') and states('sensor.slinky_heat_bulb_power') | float < 1)
              or (is_state('switch.slinky_heater', 'on') and states('sensor.slinky_heater_power') | float < 1)
              or (is_state('switch.slinky_uv_light', 'on') and states('sensor.slinky_uv_light_power') | float < 1)
          }}

# Fake sensors until everything is ready
sensor:
  - platform: template
    sensors:
      slinky_basking_temperature:
        unique_id: "sensor.slinky_basking_temperature"
        friendly_name: "Slinky's basking spot temperature"
        device_class: "temperature"
        unit_of_measurement: "°C"
        value_template: "0.0"
      slinky_temperature:
        unique_id: "sensor.slinky_temperature"
        friendly_name: "Slinky's terrarium temperature"
        device_class: "temperature"
        unit_of_measurement: "°C"
        value_template: "0.0"
      slinky_humidity:
        unique_id: "sensor.slinky_humidity"
        friendly_name: "Slinky's terrarium humidity"
        device_class: "humidity"
        unit_of_measurement: "%"
        value_template: "0.0"

automation:
  - alias: slinky_scheduling
    initial_state: true
    mode: "restart"
    trigger:
      - platform: time
        at:
          - "input_datetime.slinky_day_time"
          - "input_datetime.slinky_night_time"
      - platform: state
        entity_id: "input_boolean.slinky_scheduled_lights"
        from: "off"
        to: "on"
      - platform: homeassistant
        event: "start"
    condition:
      - condition: state
        entity_id: "input_boolean.slinky_scheduled_lights"
        state: "on"
    action:
      - choose:
          - conditions:  # Day
              - condition: time
                after: "input_datetime.slinky_day_time"
                before: "input_datetime.slinky_night_time"
            sequence:
              - service: switch.turn_on
                entity_id:
                  - "switch.slinky_heater"
                  - "switch.slinky_uv_light"

          - conditions:  # Night
              - condition: time
                after: "input_datetime.slinky_night_time"
                before: "input_datetime.slinky_day_time"
            sequence:
              - service: switch.turn_off
                entity_id:
                  - "switch.slinky_heat_bulb"
                  - "switch.slinky_uv_light"
              - service: switch.turn_on
                entity_id: "switch.slinky_heater"

  - alias: slinky_uv_burned_out
    initial_state: true
    mode: "restart"
    trigger:
      - platform: state
        entity_id: "switch.slinky_uv_light"
        from: "off"
        to: "on"
        for: &on_delay 310  # Wattage report rate is 5 minutes
      - platform: numeric_state
        entity_id: "sensor.slinky_uv_light_power"
        below: &min_power 1
        for: *on_delay
    condition:
      - condition: state
        entity_id: "switch.slinky_uv_light"
        state: "on"
        for: *on_delay
      - condition: numeric_state
        entity_id: "sensor.slinky_uv_light_power"
        below: *min_power
    action:
      - service: python_script.notify
        data:
          audio: true
          persistent: true
          push_target: "household"
          tag: "slinky_uv_burned_out"
          url: "/lovelace/livings"
          title: "Check Slinky's UV Light"
          message: "It appears that Slinky's UV light has burned out."

  - alias: slinky_heat_bulb_burned_out
    initial_state: true
    mode: "restart"
    trigger:
      - platform: state
        entity_id: "switch.slinky_heat_bulb"
        from: "off"
        to: "on"
        for: *on_delay
      - platform: numeric_state
        entity_id: "sensor.slinky_heat_bulb_power"
        below: *min_power
        for: *on_delay
    condition:
      - condition: state
        entity_id: "switch.slinky_heat_bulb"
        state: "on"
        for: *on_delay
      - condition: numeric_state
        entity_id: "sensor.slinky_heat_bulb_power"
        below: *min_power
    action:
      - service: python_script.notify
        data:
          audio: true
          persistent: true
          push_target: "household"
          tag: "slinky_heat_bulb_burned_out"
          url: "/lovelace/livings"
          title: "Check Slinky's Heat Bulb"
          message: "It appears that Slinky's heat bulb has burned out."

  - alias: slinky_heater_burned_out
    initial_state: true
    mode: "restart"
    trigger:
      - platform: state
        entity_id: "switch.slinky_heater"
        from: "off"
        to: "on"
        for: *on_delay
      - platform: numeric_state
        entity_id: "sensor.slinky_heater_power"
        below: *min_power
        for: *on_delay
    condition:
      - condition: state
        entity_id: "switch.slinky_heater"
        state: "on"
        for: *on_delay
      - condition: numeric_state
        entity_id: "sensor.slinky_heater_power"
        below: *min_power
    action:
      - service: python_script.notify
        data:
          audio: true
          persistent: true
          push_target: "household"
          tag: "slinky_heater_burned_out"
          url: "/lovelace/livings"
          title: "Check Slinky's Ceramic Heater"
          message: "It appears that Slinky's ceramic heater has burned out."
