homeassistant:
  customize:
    switch.carl_heat_bulb:
      icon: "mdi:spotlight-beam"
    switch.carl_heater:
      icon: "mdi:radiator"
    switch.carl_uv_light:
      icon: "mdi:weather-sunny"
    switch.carl_outlet_4:
      icon: "mdi:weather-fog"
    switch.carl_outlet_5:
      icon: "mdi:chip"

input_boolean:
  carl_scheduled_lights:
    name: "Carl's lights scheduling"
    icon: "mdi:home-automation"

binary_sensor:
  - platform: template
    sensors:
      carl_requires_attention:
        friendly_name: "Carl requires attention"
        device_class: "problem"
        icon_template: "mdi:turtle"
        attribute_templates:
          scheduling: "{{ is_state('input_boolean.carl_scheduled_lights', 'on') }}"
          heat_bulb: "{{ is_state('switch.carl_heat_bulb', 'off') or states('sensor.carl_heat_bulb_power') | float > 1 }}"
          heater: "{{ is_state('switch.carl_heater', 'off') or states('sensor.carl_heater_power') | float > 1 }}"
          uv_light: "{{ is_state('switch.carl_uv_light', 'off') or states('sensor.carl_uv_light_power') | float > 1 }}"
        value_template: >-
          {{    is_state('input_boolean.carl_scheduled_lights', 'off')
             or (is_state('switch.carl_heat_bulb', 'on') and states('sensor.carl_heat_bulb_power') | float < 1)
             or (is_state('switch.carl_heater', 'on') and states('sensor.carl_heater_power') | float < 1)
             or (is_state('switch.carl_uv_light', 'on') and states('sensor.carl_uv_light_power') | float < 1)
          }}

# Fake sensors until everything is ready
sensor:
  - platform: template
    sensors:
      carl_basking_temperature:
        friendly_name: "Carl's basking spot temperature"
        device_class: "temperature"
        unit_of_measurement: "°C"
        value_template: "0.0"
      carl_temperature:
        friendly_name: "Carl's terrarium temperature"
        device_class: "temperature"
        unit_of_measurement: "°C"
        value_template: "0.0"
      carl_humidity:
        friendly_name: "Carl's terrarium humidity"
        device_class: "humidity"
        unit_of_measurement: "%"
        value_template: "0.0"

automation:
  - alias: carl_wake_up
    hide_entity: True
    initial_state: True
    trigger:
      - platform: time
        at: "8:00:00"
    condition:
      - condition: state
        entity_id: "input_boolean.carl_scheduled_lights"
        state: "on"
    action:
      - service: switch.turn_on
        entity_id:
          - "switch.carl_heater"
          - "switch.carl_uv_light"

  - alias: carl_sleep
    hide_entity: True
    initial_state: True
    trigger:
      - platform: time
        at: "22:00:00"
    condition:
      - condition: state
        entity_id: "input_boolean.carl_scheduled_lights"
        state: "on"
    action:
      - service: switch.turn_off
        entity_id:
          - "switch.carl_heat_bulb"
          - "switch.carl_uv_light"
      - service: switch.turn_on
        entity_id: "switch.carl_heater"

  - alias: carl_uv_burned_out
    hide_entity: True
    initial_state: True
    trigger:
      - platform: state
        entity_id: "switch.carl_uv_light"
        from: "off"
        to: "on"
        for: &on_delay
          seconds: 330 # Wattage report rate is 300 seconds / 5 minutes
      - platform: numeric_state
        entity_id: "sensor.carl_uv_light_power"
        below: &min_power 1
    condition:
      - condition: state
        entity_id: "switch.carl_uv_light"
        state: "on"
        for: *on_delay
      - condition: numeric_state
        entity_id: "sensor.carl_uv_light_power"
        below: *min_power
    action:
      - service: python_script.notify
        data:
          audio: True
          persistent: True
          push_target: "household"
          tag: "carl_uv_burned_out"
          url: "/lovelace/livings"
          title: "Check Carl's UV Light"
          message: "It appears that Carl's UV light has burned out."

  - alias: carl_heat_bulb_burned_out
    hide_entity: True
    initial_state: True
    trigger:
      - platform: state
        entity_id: "switch.carl_heat_bulb"
        from: "off"
        to: "on"
        for: *on_delay
      - platform: numeric_state
        entity_id: "sensor.carl_heat_bulb_power"
        below: *min_power
    condition:
      - condition: state
        entity_id: "switch.carl_heat_bulb"
        state: "on"
        for: *on_delay
      - condition: numeric_state
        entity_id: "sensor.carl_heat_bulb_power"
        below: *min_power
    action:
      - service: python_script.notify
        data:
          audio: True
          persistent: True
          push_target: "household"
          tag: "carl_heat_bulb_burned_out"
          url: "/lovelace/livings"
          title: "Check Carl's Heat Bulb"
          message: "It appears that Carl's heat bulb has burned out."

  - alias: carl_heater_burned_out
    hide_entity: True
    initial_state: True
    trigger:
      - platform: state
        entity_id: "switch.carl_heater"
        from: "off"
        to: "on"
        for: *on_delay
      - platform: numeric_state
        entity_id: "sensor.carl_heater_power"
        below: *min_power
    condition:
      - condition: state
        entity_id: "switch.carl_heater"
        state: "on"
        for: *on_delay
      - condition: numeric_state
        entity_id: "sensor.carl_heater_power"
        below: *min_power
    action:
      - service: python_script.notify
        data:
          audio: True
          persistent: True
          push_target: "household"
          tag: "carl_heater_burned_out"
          url: "/lovelace/livings"
          title: "Check Carl's Ceramic Heater"
          message: "It appears that Carl's ceramic heater has burned out."
