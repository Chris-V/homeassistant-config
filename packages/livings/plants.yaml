homeassistant:
  customize:
    binary_sensor.all_plants:
      friendly_name: "All plants"

group:
  all_plants:
    name: "All plants"
    icon: "mdi:flower"
    entities:
      - "plant.drake"
      # - "plant.maitre_doyle"
      # - "plant.snicket"
      - "plant.spidy"
      - "plant.viny"

template:
  - binary_sensor:
      - unique_id: "binary_sensor.all_plants"
        name: "all_plants"
        device_class: "problem"
        icon: "mdi:leaf{{ iif(this.state == 'on', '-off', '') }}"
        state: "{{ this.attributes.entity_id | default([]) | length }}"
        attributes:
          entity_id: >-
            {{
              expand('group.all_plants')
                | selectattr('state', 'eq', 'problem')
                | map('attr', 'entity_id')
                | list
            }}

input_boolean:
  broadcast_plant_problems:
    name: "Broadcast plant problems"
    icon: "mdi:bullhorn"

automation:
  - id: "994eba31-84de-4769-8958-f24b5346111a"
    alias: notify_plant_problems
    initial_state: true
    mode: "parallel"
    triggers:
      - trigger: state
        attribute: "problem"
        entity_id:
          - "plant.drake"
          # - "plant.maitre_doyle"
          # - "plant.snicket"
          - "plant.spidy"
          - "plant.viny"

    variables:
      name: "{{ trigger.to_state.name }}"
      tag: "plant_{{ trigger.to_state.object_id }}"
      issues: >-
        {{
          (trigger.to_state.attributes.problem | default('') | lower).split(', ')
            | reject('match', '.*(unavailable|unknown|none)', ignorecase=true)
            | reject('match', '(brightness|battery).*', ignorecase=true)
            | reject('in', ['conductivity high'])
            | map('replace', 'moisture low', 'thirsty')
            | map('replace', 'moisture high', 'drowning')
            | map('replace', 'temperature low', 'cold')
            | map('replace', 'temperature high', 'hot')
            | map('replace', 'conductivity low', 'hungry')
            | sort
        }}

    actions:
      - if: "{{ issues | length == 0 }}"
        then:
          - action: python_script.notify
            data:
              dismiss: true
              <<: &notification_options
                audio: "{{ is_state('input_boolean.broadcast_plant_problems', 'on') }}"
                persistent: true
                push_target: "household"
                tag: "{{ tag }}"

        else:
          - action: python_script.notify
            data:
              <<: *notification_options
              url: "/lovelace/livings"
              title: "Check {{ name }}"
              message: >-
                {% for issue in issues -%}
                  {%- if loop.first %}{{ name }} is {% elif loop.last %} and {% else %}, {% endif -%}
                  {{ issue }}
                  {%- if loop.last %}.{% endif %}
                {%- endfor %}
