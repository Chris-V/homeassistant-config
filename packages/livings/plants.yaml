group:
  all_plants:
    name: "All plants"
    icon: "mdi:flower"
    entities:
      - "plant.dollorama"
      - "plant.drake"
      - "plant.maitre_doyle"
      - "plant.snicket"
      - "plant.spidy"
      - "plant.viny"

binary_sensor:
  - platform: template
    sensors:
      all_plants:
        unique_id: "binary_sensor.all_plants"
        friendly_name: "All plants"
        device_class: "problem"
        icon_template: >-
          {% set active = expand('group.all_plants')
              | selectattr('state', 'eq', 'problem')
              | list
              | length != 0 %}
          mdi:leaf{% if active %}-off{% endif %}
        value_template: >-
          {{
            expand('group.all_plants')
              | selectattr('state', 'eq', 'problem')
              | list
              | length != 0
          }}
        attribute_templates:
          entity_id: >-
            {{
              expand('group.all_plants')
                | selectattr('state', 'eq', 'problem')
                | map('attr', 'entity_id')
                | list
            }}

input_boolean:
  notify_plant_problems:
    name: "Notify plant problems"
    icon: 'mdi:message-cog'

automation:
  - alias: notify_plant_problems
    initial_state: true
    mode: "parallel"
    trigger:
      - platform: state
        entity_id:
          - "sensor.dollorama_problems"
          - "sensor.drake_problems"
          - "sensor.maitre_doyle_problems"
          - "sensor.snicket_problems"
          - "sensor.spidy_problems"
          - "sensor.viny_problems"
    condition:
      - "{{ trigger.from_state is not defined or trigger.from_state.state != trigger.to_state.state }}"
      - >-
          {% set state = trigger.to_state.state %}
          {{ 'unavailable' not in state and state not in ('none', 'battery low') }}
      - condition: state
        entity_id: "input_boolean.notify_plant_problems"
        state: "on"
    action:
      - service: python_script.notify
        data:
          audio: true
          persistent: true
          push_target: "household"
          tag: "plant_{{ trigger.to_state.object_id }}"
          url: "/lovelace/livings"
          title: "Check {{ trigger.to_state.name }}"
          message: >-
            {%
            set issues = (
              trigger.to_state.state
                | lower
                | replace('moisture low', 'thirsty')
                | replace('moisture high', 'drowning')
                | replace('temperature low', 'cold')
                | replace('temperature high', 'hot')
                | replace('brightness low', 'afraid')
                | replace('brightness high', 'blinded')
                | replace('conductivity low', 'hungry')
                | replace('conductivity high', 'bursting')
                | replace('battery low', 'in need of a new battery')
              ).split(', ')
              | reject('equalto', '')
              | sort
              | list
            %}
            {% for issue in issues -%}
              {%- if loop.first %}{{ trigger.to_state.name }} is {% elif loop.last %} and {% else %}, {% endif -%}
              {{ issue }}
              {%- if loop.last %}.{% endif %}
            {%- endfor %}
