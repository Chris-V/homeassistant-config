homeassistant:
  customize:
    binary_sensor.all_plants:
      friendly_name: "All plants"

group:
  all_plants:
    name: "All plants"
    icon: "mdi:flower"
    entities:
      - "plant.dollorama"
      - "plant.drake"
      - "plant.maitre_doyle"
      - "plant.snicket"
      - "plant.spidy"
      - "plant.viny"

template:
  binary_sensor:
    - unique_id: "binary_sensor.all_plants"
      name: "all_plants"
      device_class: "problem"
      icon: >-
        {% set active = expand('group.all_plants')
            | selectattr('state', 'eq', 'problem')
            | list
            | length != 0 %}
        mdi:leaf{% if active %}-off{% endif %}
      state: >-
        {{
          expand('group.all_plants')
            | selectattr('state', 'eq', 'problem')
            | list
            | length != 0
        }}
      attributes:
        entity_id: >-
          {{
            expand('group.all_plants')
              | selectattr('state', 'eq', 'problem')
              | map('attr', 'entity_id')
              | list
          }}

input_boolean:
  notify_plant_problems:
    name: "Notify plant problems"
    icon: 'mdi:message-cog'

automation:
  - id: "994eba31-84de-4769-8958-f24b5346111a"
    alias: notify_plant_problems
    initial_state: true
    mode: "parallel"
    trigger:
      - platform: state
        entity_id:
          - "sensor.dollorama_problems"
          - "sensor.drake_problems"
          - "sensor.maitre_doyle_problems"
          - "sensor.snicket_problems"
          - "sensor.spidy_problems"
          - "sensor.viny_problems"

    variables:
      name: "{{ trigger.to_state.name }}"
      tag: "plant_{{ trigger.to_state.object_id }}"
      issues: >-
        {{
          (trigger.to_state.state
            | lower
            | replace('unavailable', '')
            | replace('unknown', '')
            | replace('moisture low', 'thirsty')
            | replace('moisture high', 'drowning')
            | replace('temperature low', 'cold')
            | replace('temperature high', 'hot')
            | replace('brightness low', '')
            | replace('brightness high', '')
            | replace('conductivity low', 'hungry')
            | replace('conductivity high', '')
            | replace('battery low', '')
          ).split(', ')
          | reject('equalto', '')
          | sort
          | list
        }}

    condition:
      - condition: state
        entity_id: "input_boolean.notify_plant_problems"
        state: "on"
      - "{{ trigger.from_state is not defined or trigger.from_state.state != trigger.to_state.state }}"

    action:
      - choose:
          conditions: "{{ issues | length == 0 }}"
          sequence:
            - service: python_script.notify
              data:
                dismiss: true
                <<: &notification_options
                  audio: true
                  persistent: true
                  push_target: "household"
                  tag: "{{ tag }}"

        default:
          - service: python_script.notify
            data:
              <<: *notification_options
              url: "/lovelace/livings"
              title: "Check {{ name }}"
              message: >-
                {% for issue in issues -%}
                  {%- if loop.first %}{{ name }} is {% elif loop.last %} and {% else %}, {% endif -%}
                  {{ issue }}
                  {%- if loop.last %}.{% endif %}
                {%- endfor %}
