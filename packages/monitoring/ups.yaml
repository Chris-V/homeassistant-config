homeassistant:
  customize:
    automation.notify_power_back:
      friendly_name: "Notify when power is back"
    automation.notify_power_outage:
      friendly_name: "Notify when power is out"
    automation.notify_ups_replace_battery:
      friendly_name: "Notify UPS battery status"
    automation.ups_power_off:
      friendly_name: "Power off devices when running on UPS battery"
    automation.ups_power_on:
      friendly_name: "Power on devices when not running on UPS battery"

group:
  ups:
    name: "UPS"
    icon: "mdi:power-plug"
    entities:
      - sensor.ups_status
      - sensor.ups_load
      - sensor.ups_battery
      - sensor.ups_input_voltage
      - sensor.ups_time_left
      - sensor.ups_time_on_battery

apcupsd:
  host: !secret ups_host
  port: !secret ups_port

binary_sensor:
  - platform: apcupsd

sensor:
  - platform: apcupsd
    resources:
      - bcharge # Battery Charge
      - linev # Input Voltage
      - loadpct # Load %
      - status
      - timeleft # Time Left on Battery
      - tonbatt # Time on Battery

automation:
  - alias: notify_power_back
    initial_state: True
    trigger:
      - platform: state
        entity_id: "binary_sensor.ups_online_status"
        to: "on"
    action:
      service: notify.admin
      data_template:
        title: "Power is Back"
        message: "UPS is running on power after a {{ relative_time(trigger.from_state.last_changed) }} outage."
        data:
          tag: "ups_state"

  - alias: notify_power_outage
    initial_state: True
    trigger:
      - platform: state
        entity_id: "binary_sensor.ups_online_status"
        to: "off"
    action:
      service: notify.admin
      data:
        title: "Power Outage"
        message: "UPS is running on battery. Media Server will shutdown in a minute."
        data:
          tag: "ups_state"

  - alias: notify_ups_replace_battery
    initial_state: True
    trigger:
      platform: template
      value_template: "{{ 'REPLACEBATT' in states('sensor.ups_status') }}"
    action:
      - service: persistent_notification.create
        data:
          notification_id: "change_ups_battery"
          title: "Replace UPS battery"
          message: "UPS battery must be replaced. Search on amazon: https://amzn.to/2fJo3Ax"
      - service: notify.admin
        data:
          title: "Replace UPS battery"
          message: "UPS battery must be replaced. Search on amazon: https://amzn.to/2fJo3Ax"
          data:
            tag: "ups_battery"

  - alias: ups_power_off
    trigger:
      platform: state
      entity_id: "binary_sensor.ups_online_status"
      to: "off"
      for:
        seconds: 70 # UPS is polled every 60 secs, this *must* be higher to outlast short power outages.
    action:
      service: switch.turn_off
      entity_id:
        - switch.network_media

  - alias: ups_power_on
    trigger:
      platform: state
      entity_id: "binary_sensor.ups_online_status"
      to: "on"
      for:
        seconds: 30 # Power can come back for a couple seconds then cut again. Been there done that.
    action:
      service: switch.turn_on
      entity_id:
        - switch.network_media
