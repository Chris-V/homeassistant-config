homeassistant:
  customize:
    sensor.media_cpu_used:
      friendly_name: "Media's CPU use"
      icon: "mdi:chip"
    sensor.media_cpu_temperature:
      friendly_name: "Media's CPU temperature"
      icon: "mdi:fire"
    sensor.media_ram_used_percent:
      friendly_name: "Media's memory use"
      icon: "mdi:memory"

input_boolean:
  notify_server_outages:
    name: "Notify server outages"
    icon: "mdi:message-cog"

shell_command:
  turn_off_server: >-
    /usr/bin/ssh -F /config/.secrets/ssh_config {{ server_key }} "sudo poweroff"
  wake_on_lan: >-
    /usr/bin/ssh -F /config/.secrets/ssh_config router "/usr/sbin/wol -p 9 -i '{{ broadcast }}' '{{ mac }}'"

switch:
  - platform: template
    switches:
      network_media:
        unique_id: "switch.network_media"
        friendly_name: "Media"
        value_template: "{{ is_state('binary_sensor.avatar_media', 'on') }}"
        icon_template: "mdi:server-network{% if not is_state('binary_sensor.avatar_media', 'on') %}-off{% endif %}"
        turn_on:
          action: "shell_command.wake_on_lan"
          data:
            broadcast: !secret network_broadcast
            mac: !secret media_mac
        turn_off:
          action: "shell_command.turn_off_server"
          data:
            server_key: "media"

automation:
  - id: "a179c0b0-9c03-4be6-9437-c2bd6c58e9b7"
    alias: notify_new_network_device
    initial_state: true
    mode: "parallel"
    trigger:
      - platform: event
        event_type: "device_tracker_new_device"
    action:
      - action: python_script.notify
        data:
          push_target: "admin"
          persistent: true
          title: "New device detected on network"
          message: "Device data: {{ trigger.event.data | tojson }}"

  - id: "778a17bc-898a-43ca-a457-b42c5c32b193"
    alias: notify_server_state_change
    initial_state: true
    mode: "parallel"

    trigger:
      - platform: state
        entity_id:
          - switch.network_media
        to: ~
        for: &server_outage_leeway 45

    variables:
      # Normalize state to only on/off
      state: "{% if trigger.to_state.state == 'on' %}on{% else %}off{% endif %}"
      state_action: "{% if state == 'on' %}off{% else %}on{% endif %}"

    condition:
      - condition: state
        entity_id: "input_boolean.notify_server_outages"
        state: "on"

    action:
      - action: python_script.notify
        data:
          push_target: "admin"
          tag: "server_{{ trigger.to_state.object_id }}"
          title: "{{ trigger.to_state.name }} server is {{ state }}line"
          url: "/admin-infrastructure/network"
          push_data:
            entity_id: "{{ trigger.entity_id }}"
          push_actions:
            - action: "power_{{ state_action }}_server"
              title: "Power {{ state_action }}"
              icon: "/local/icons/power-plug-{{ state_action }}.png"

  - id: "ed45f4fc-3c90-456d-b499-516f568adf4e"
    alias: power_on_server
    initial_state: true
    mode: "parallel"
    trigger:
      - platform: event
        event_type:
          - "html5_notification.clicked"
          - "mobile_app_notification_action"
        event_data:
          action: "power_on_server"
    action:
      - action: switch.turn_on
        target:
          entity_id: "{{ trigger.event.data.data.entity_id }}"

  - id: "c4358eec-8328-4049-ba29-25438eb44fa6"
    alias: power_off_server
    initial_state: true
    mode: "parallel"
    trigger:
      - platform: event
        event_type:
          - "html5_notification.clicked"
          - "mobile_app_notification_action"
        event_data:
          action: "power_off_server"
    action:
      - action: switch.turn_off
        target:
          entity_id: "{{ trigger.event.data.data.entity_id }}"
