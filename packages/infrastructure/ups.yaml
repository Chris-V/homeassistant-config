homeassistant:
  customize:
    sensor.ups_battery_status:
      battery_type: "APC BR1500G RS 1500 12V"
      battery_warning_level: 0

apcupsd:
  host: !secret ups_host
  port: !secret ups_port

binary_sensor:
  - platform: apcupsd

sensor:
  - platform: apcupsd
    resources:
      - bcharge # Battery Charge
      - linev # Input Voltage
      - loadpct # Load %
      - status
      - timeleft # Time Left on Battery
      - tonbatt # Time on Battery
  - platform: template
    sensors:
      ups_battery_status:
        friendly_name: "UPS battery status"
        device_class: "battery"
        unit_of_measurement: "%"
        value_template: >-
          {% if 'REPLACEBATT' in states('sensor.ups_status') %}0{% else %}100{% endif %}

input_boolean:
  notify_power_outages:
    name: "Notify power outages"
    icon: "mdi:message-settings-variant"
  power_outage_manage_devices:
    name: "Manage devices based on power outages"
    initial: "on"

input_text:
  power_outage_id:
    name: "Power outage ID"

automation:
  - alias: notify_power_restored
    initial_state: True
    trigger:
      - platform: state
        entity_id: "binary_sensor.ups_online_status"
        to: "on"
    condition: &power_outage_conditions
      condition: state
      entity_id: "input_boolean.notify_power_outages"
      state: "on"
    action:
      - service: python_script.notify
        data_template:
          persistent: True
          push_target: "household"
          tag: "power_outage_{{ states('input_text.power_outage_id') }}"
          title: "Power restored"
          message: "The power outage at home has finished after {{ relative_time(trigger.from_state.last_changed) }}."
          push_actions: &power_outage_actions
            - action: "device_management_{% if states('input_boolean.power_outage_manage_devices') == 'off' %}on{% else %}off{% endif %}"
              title: "{% if states('input_boolean.power_outage_manage_devices') == 'off' %}Enable{% else %}Disable{% endif %} device management"
              icon: "/local/icons/power-plug-{% if states('input_boolean.power_outage_manage_devices') == 'off' %}on{% else %}off{% endif %}.png"

  - alias: notify_power_outage
    initial_state: True
    trigger:
      - platform: state
        entity_id: "binary_sensor.ups_online_status"
        to: "off"
    condition: *power_outage_conditions
    action:
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.power_outage_id"
          value: "{{ as_timestamp(now()) | int }}"
      - service: python_script.notify
        data_template:
          persistent: True
          push_target: "household"
          tag: "power_outage_{{ states('input_text.power_outage_id') }}"
          title: "Power outage"
          message: "A power outage is ongoing at home."
          push_actions:
            <<: *power_outage_actions

  - alias: notification_action_enable_device_management
    initial_state: True
    trigger:
      platform: event
      event_type: "html5_notification.clicked"
      event_data:
        action: "device_management_on"
    action:
      service: switch.turn_on
      data:
        entity_id: "input_boolean.power_outage_manage_devices"

  - alias: notification_action_disable_device_management
    initial_state: True
    trigger:
      platform: event
      event_type: "html5_notification.clicked"
      event_data:
        action: "device_management_off"
    action:
      service: switch.turn_off
      data:
        entity_id: "input_boolean.power_outage_manage_devices"

  - alias: ups_power_off_devices
    initial_state: True
    trigger:
      platform: state
      entity_id: "binary_sensor.ups_online_status"
      to: "off"
      for:
        seconds: 70 # UPS is polled every 60 secs, this *must* be higher to outlast short power outages.
    condition:
      condition: state
      entity_id: "input_boolean.power_outage_manage_devices"
      state: "on"
    action:
      service: switch.turn_off
      entity_id:
        - switch.network_media

  - alias: ups_power_on_devices
    initial_state: True
    trigger:
      platform: state
      entity_id: "binary_sensor.ups_online_status"
      to: "on"
      for:
        seconds: 30 # Power can come back for a couple seconds then cut again. Been there done that.
    condition:
      condition: state
      entity_id: "input_boolean.power_outage_manage_devices"
      state: "on"
    action:
      service: switch.turn_on
      entity_id:
        - switch.network_media
