homeassistant:
  customize:
    sensor.ups_battery_status:
      battery_type: "APC BR1500G RS 1500 12V"
      battery_warning_level: 0
      friendly_name: "UPS battery status"
    switch.managed_auxialiary_servers:
      icon: "mdi:server-security"

switch:
  - platform: "group"
    unique_id: "switch.managed_auxialiary_servers"
    name: "Managed auxialiary servers"
    entities:
      - "switch.network_media"

template:
  - sensor:
      - unique_id: "sensor.ups_battery_status"
        name: "ups_battery_status"
        device_class: "battery"
        unit_of_measurement: "%"
        state: "{{ iif('REPLACEBATT' in states('sensor.ups_status'), 0, 100) }}"

input_boolean:
  power_outage_manage_devices:
    name: "Manage devices based on power outages"

automation:
  - id: "5cdf949f-e2e8-48b2-88c1-59f2c2f4fad2"
    alias: power_outage_management
    initial_state: true
    mode: "restart"

    trigger:
      - platform: state
        entity_id: "binary_sensor.ups_online_status"
        to: "off"
        for: 30

    variables:
      shutdown_minutes: 2

    action:
      - service: python_script.notify
        data:
          <<: &outage_notification_options
            persistent: true
            push_target: "household"
            tag: "power_outage"
            title: "Power outage"
            url: "/admin-infrastructure/network"
          message: |-
            A power outage is ongoing at home.
            {%- if is_state('switch.managed_auxialiary_servers', 'off') %} Auxiliary servers are already turned off.
            {%- elif is_state('input_boolean.power_outage_manage_devices', 'on') %} Auxiliary servers will automatically shutdown in {{ shutdown_minutes }} minutes.
            {%- else %} Automatic shutdown of auxiliary servers is disabled.
            {%- endif %}
          push_actions: >-
            {% set ns = namespace(actions = []) %}
            {% if is_state('switch.managed_auxialiary_servers', 'on') %}
              {% set ns.actions = ns.actions + [{"action": "power_outage_shutdown", "title": "Shutdown now"}] %}
              {% if is_state('input_boolean.power_outage_manage_devices', 'on') %}
                {% set ns.actions = ns.actions + [{"action": "power_outage_cancel", "title": "Cancel"}] %}
              {% endif %}
            {% endif %}
            {{ ns.actions }}

      - condition: state
        entity_id: "switch.managed_auxialiary_servers"
        state: "on"

      - wait_for_trigger:
          - platform: state
            entity_id: "binary_sensor.ups_online_status"
            to: "on"
          - platform: event
            event_type:
              - "html5_notification.clicked"
              - "mobile_app_notification_action"
            event_data:
              action: "power_outage_shutdown"
          - platform: event
            event_type:
              - "html5_notification.clicked"
              - "mobile_app_notification_action"
            event_data:
              action: "power_outage_cancel"
        timeout:
          minutes: "{{ shutdown_minutes if is_state('input_boolean.power_outage_manage_devices', 'on') else 240 }}"
        continue_on_timeout: true

      - condition: >-
          {% set timed_out = wait.trigger is none %}
          {{
            is_state('binary_sensor.ups_online_status', 'off')
              and (
                (timed_out and is_state('input_boolean.power_outage_manage_devices', 'on'))
                  or (not timed_out and wait.trigger.event.data.action != 'power_outage_cancel')
              )
          }}

      - service: switch.turn_off
        entity_id: "switch.network_media"
      - service: python_script.notify
        data:
          <<: *outage_notification_options
          message: "A power outage is ongoing at home. Auxiliary servers have been shutdown."

  - id: "37c346a4-c34f-40bf-9ad9-d34407afc29c"
    alias: notify_power_restored
    initial_state: true
    mode: "restart"

    trigger:
      - platform: state
        entity_id: "binary_sensor.ups_online_status"
        to: "on"
        for: 60
      # It's possible Automate has shut down if the outage outlasted the UPS.
      # This shutdown is handled by a local daemon.
      - platform: homeassistant
        event: "start"

    variables:
      power_on_minutes: 2

    condition:
      - condition: state
        entity_id: "binary_sensor.ups_online_status"
        state: "on"
        for: 60

    action:
      - service: python_script.notify
        data:
          persistent: true
          push_target: "household"
          title: "Power restored"
          message: |-
            A power outage has finished after {{ time_since(trigger.from_state.last_changed, 0) }}.
            {%- if is_state('switch.managed_auxialiary_servers', 'on') %} Auxiliary servers are already powered on.
            {%- elif is_state('input_boolean.power_outage_manage_devices', 'on') %} Auxiliary servers will automatically power on in {{ power_on_minutes }} minutes.
            {%- else %} Automatic power on of auxiliary servers is disabled.
            {%- endif %}
          push_actions: >-
            {% set ns = namespace(actions = []) %}
            {% if is_state('switch.managed_auxialiary_servers', 'off') and is_state('input_boolean.power_outage_manage_devices', 'on') %}
              {% set ns.actions = ns.actions + [{"action": "power_restored_cancel", "title": "Cancel"}] %}
            {% endif %}
            {{ ns.actions }}
      # TODO: dismiss outstanding power outage notifications, but stack power restored ones

      - condition: and
        conditions:
          - condition: state
            entity_id: "switch.managed_auxialiary_servers"
            state: "off"
          - condition: state
            entity_id: "input_boolean.power_outage_manage_devices"
            state: "on"

      - wait_for_trigger:
          - platform: state
            entity_id: "binary_sensor.ups_online_status"
            to: "off"
          - platform: event
            event_type:
              - "html5_notification.clicked"
              - "mobile_app_notification_action"
            event_data:
              action: "power_restored_cancel"
        timeout:
          minutes: "{{ power_on_minutes }}"
        continue_on_timeout: true

      - condition: >-
          {% set timed_out = wait.trigger is none %}
          {{
            is_state('binary_sensor.ups_online_status', 'on')
              and timed_out
              and is_state('input_boolean.power_outage_manage_devices', 'on')
          }}

      - service: switch.turn_on
        entity_id: "switch.network_media"
