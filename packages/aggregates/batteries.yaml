homeassistant:
  customize:
    binary_sensor.all_batteries:
      friendly_name: "All batteries"

group:
  all_batteries:
    name: "Batteries"
    icon: "mdi:battery"
    entities: &battery_entities
      - sensor.basement_bathroom_door_sensor_battery
      - sensor.basement_bathroom_multisensor_battery
      - sensor.chris_bedside_remote_battery
      - sensor.dollorama_battery
      - sensor.drake_battery
      - sensor.guest_bedroom_window_sensor_battery
      - sensor.karine_bedside_remote_battery
      - sensor.kitchen_door_lock_battery
      - sensor.kitchen_door_sensor_battery
      - sensor.kitchen_sink_leak_sensor_battery
      - sensor.living_room_door_sensor_battery
      - sensor.living_room_remote_battery
      - sensor.laundry_motion_sensor_battery
      - sensor.lounge_window_sensor_battery
      - sensor.main_bathroom_multisensor_battery
      - sensor.maitre_doyle_battery
      - sensor.snicket_battery
      - sensor.spidy_battery
      - sensor.studio_window_sensor_battery
      - sensor.ups_battery_status
      - sensor.viny_battery
      - sensor.water_heater_leak_sensor_battery
      - sensor.workshop_motion_sensor_battery

template:
  binary_sensor:
    - unique_id: "binary_sensor.all_batteries"
      name: "all_batteries"
      device_class: "battery"
      state: >-
        {% set n = namespace(entities = []) %}

        {% for entity in expand('group.all_batteries') %}
          {% set state = entity.state | int(0) %}
          {% set warning_level = state_attr(entity.entity_id, 'battery_warning_level') | int(25) %}
          {% if state <= warning_level %}
            {% set n.entities = n.entities + [entity.entity_id] %}
          {% endif %}
        {% endfor %}

        {{ n.entities | length != 0 }}
      attributes:
        entity_id: >-
          {% set ns = namespace(entities = []) %}

          {% for entity in expand('group.all_batteries') %}
            {% set state = entity.state | int(0) %}
            {% set warning_level = state_attr(entity.entity_id, 'battery_warning_level') | int(25) %}
            {% if state <= warning_level %}
              {% set ns.entities = ns.entities + [entity.entity_id] %}
            {% endif %}
          {% endfor %}

          {{ ns.entities }}

automation:
  - id: "88b9562c-a5bf-4be6-bd7b-d3dfe109a816"
    alias: "Notify low batteries"
    initial_state: true
    mode: "parallel"
    trigger:
      - platform: numeric_state
        entity_id: *battery_entities
        value_template: >-
          {% if state.state in ['unknown', 'unavailable'] -%}
            100
          {%- else -%}
            {{ state.state | int - state.attributes.battery_warning_level | default | int(25) - 1 }}
          {%- endif %}
        below: 0
    action:
      - service: python_script.notify
        data:
          persistent: true
          push_target: "household"
          tag: "battery_low_{{ trigger.to_state.object_id }}"
          url: >-
            {% set battery_type = trigger.to_state.attributes.battery_type %}
            {% if battery_type is undefined %}
              "/lovelace/settings"
            {% else %}
              https://www.amazon.ca/s/?field-keywords=battery+{{ battery_type | replace(' ', '+') }}
            {% endif %}
          title: "Replace {{ trigger.to_state.name | lower }}"
          message: >-
            {% set battery_type = trigger.to_state.attributes.battery_type %}
            {% if battery_type is defined %}
              Search on Amazon for "{{ battery_type }}" batteries.
            {% endif %}
