binary_sensor:
  - platform: template
    sensors:
      use_alarm_theme:
        friendly_name: "Use alarm theme"
        icon_template: "mdi:alarm-light"
        value_template: >-
          {{
            expand(
              'binary_sensor.all_leaks',
            ) | selectattr('state', '==', 'on')
              | first is defined
          }}
      use_dark_theme:
        friendly_name: "Use dark theme"
        icon_template: "mdi:theme-light-dark"
        value_template: "{{ state_attr('sun.sun', 'elevation') | float < -3 }}"

input_boolean:
  automatic_night_theme:
    name: "Automatic night theme"
    initial: true
    icon: "mdi:theme-light-dark"

input_select:
  default_theme:
    name: "Default theme"
    icon: "mdi:palette"
    options: &themes
      - "default"
      - "Google Light Theme"
      - "Google Dark Theme"
      - "clear"
      - "clear-dark"

  day_theme:
    name: "Day theme"
    icon: "mdi:weather-sunset-up"
    options: *themes

  night_theme:
    name: "Night theme"
    icon: "mdi:weather-sunset-down"
    options: *themes

automation:
  - alias: update_backend_theme
    initial_state: true
    mode: "queued"
    trigger:
      - platform: state
        entity_id:
          - "input_select.default_theme"
          - "binary_sensor.use_alarm_theme"
    action:
      - service: frontend.set_theme
        data:
          name: >-
            {% if is_state('binary_sensor.use_alarm_theme', 'on') -%}
              ios-{{
                'dark'
                  if is_state('binary_sensor.use_dark_theme', 'on')
                  else 'light'
              }}-mode-red
            {%- else -%}
              {{ states('input_select.default_theme') | default('default', True) -}}
            {% endif %}

  - alias: update_default_theme
    initial_state: true
    mode: "restart"
    trigger:
      - platform: state
        entity_id:
          - "binary_sensor.use_dark_theme"
          - "input_boolean.automatic_night_theme"
          - "input_select.day_theme"
          - "input_select.night_theme"
      - platform: homeassistant
        event: "start"
    condition:
      - condition: state
        entity_id: "input_boolean.automatic_night_theme"
        state: "on"
    action:
      - service: input_select.select_option
        data:
          entity_id: "input_select.default_theme"
          option: >-
            {{
              states(
                'input_select.'
                ~ ('night' if is_state('binary_sensor.use_dark_theme', 'on') else 'day' )
                ~ '_theme'
              ) | default('default')
            }}
