{# Parameters:
 #   * image: The URL of the image to display in background.
 #   * problems_entity_id: Entity representing problems of this terrarium
 #   * switches: array
 #       * entity_id: Entity to be used
 #       * has_power_metrics: `true` if this switch has power and energy sensors
 #       * lock: `true` if the button should be locked to prevent accidental activations
 #       * name: Visible name of the entity
 #       * problem_key: The key that is used to reference this entity from problems_entity_id
 #       * show_in_footer: `true` if this switch is controllable from the footer
 #   * sensors[]: array
 #       * entity_id: Entity to be used
 #       * name: Visible name of the entity
 #}

{% macro detailed_switch(switch, aspect_ratio) %}
{% set object_id = switch.entity_id.split('.')[1] %}
- type: custom:button-card
  name: {{ switch.name }}
  entity: {{ switch.entity_id }}
  {% if switch.has_power_metrics is true -%}
  triggers_update:
    - sensor.{{ object_id }}_power
    - sensor.{{ object_id }}_energy
  {%- endif %}
  aspect_ratio: {{ aspect_ratio }}
  show_label: {{ switch.has_power_metrics is true }}
  {% if switch.lock is true -%}
  lock:
    enabled: true
  {%- endif %}
  {% if switch.has_power_metrics is true -%}
  label: >
    [[[
      return Math.round(states['sensor.{{ object_id }}_power'].state)
          + ' '
          + states['sensor.{{ object_id }}_power'].attributes['unit_of_measurement']
          + ' ‚Åì '
          + Math.round(states['sensor.{{ object_id }}_energy'].state)
          + ' '
          + states['sensor.{{ object_id }}_energy'].attributes['unit_of_measurement']
    ]]]
  hold_action:
    action: more-info
    entity: sensor.{{ object_id }}_power
  {%- else -%}
  hold_action:
    action: more-info
    entity: {{ switch.entity_id }}
  {%- endif %}
  styles:
    name:
      - font-size: 14px
      - padding: 0px 5px
    label:
      - color: "#BDBDBD"
      - font-size: 12px
      - padding: 0px 5px
{% endmacro %}

type: picture-elements
image: {{ image }}
style: |
  .element[class~=element] {
    position: relative;
    transform: none;
  }
  ::-webkit-scrollbar {
    width: 3px;
    height: 3px;
  }
  ::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.45);
  }
  ::-webkit-scrollbar-thumb {
    background: rgba(0, 139, 239, 0.45);
  }
  ::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 139, 239, 1);
  }
elements:
  - type: custom:group-element
    visible: true
    no_toggle_hide: true
    elements_pos:
      position: absolute
      top: 0
      right: 0
      left: 0
      bottom: 0
      display: flex
      flex-direction: column
      "--secondary-text-color": "#DADADB"
      "--primary-text-color": "#DADADB"
      "--paper-item-icon-color": "#DADADB"
      "--iron-icon-width": 40px
      "--iron-icon-height": 40px
      "--ha-card-background": rgba(0, 0, 0, 0)
      "--ha-card-box-shadow": none
    elements:
      - type: custom:group-element  # Content
        visible: true
        no_toggle_hide: true
        elements_pos:
          order: 1
          flex-grow: 1
          flex-shrink: 1
          display: flex
          overflow: auto hidden
          scroll-behavior: smooth
          scroll-snap-type: x mandatory
          "-webkit-overflow-scrolling": touch
          "--iron-icon-width": 24px
          "--iron-icon-height": 24px
        elements:
          - type: conditional  # Problem indicator
            conditions:
              - entity: {{ problems_entity_id }}
                state: "on"
            elements:
              - type: icon
                icon: mdi:alert-circle
                title: Problems
                entity: {{ problems_entity_id }}
                tap_action:
                  action: more-info
                style:
                  position: absolute
                  right: 1em
                  top: 1.25em
                  z-index: 1
                  color: var(--google-red-500)
                  filter: drop-shadow(black 0 0 1px)

          - type: custom:gap-card  # Initial
            height: 0
            style: &content_slide_style
              display: block
              width: 100%
              height: 100%
              flex-shrink: 0
              scroll-snap-align: start

          - type: custom:hui-element  # All switches
            card_type: vertical-stack
            style:
              <<: *content_slide_style
              background-color: rgba(0, 0, 0, 0.45)
            cards:
              - type: horizontal-stack
                cards:
{% filter indent(18) -%}
{% for switch in (switches | default([]) | list)[:3] -%}
{{ detailed_switch(switch, "1.7/1") }}
{% endfor %}
{%- endfilter %}
              - type: horizontal-stack
                cards:
{% filter indent(18) -%}
{% for switch in (switches | default([]) | list)[3:] -%}
{{ detailed_switch(switch, "1.2/1") }}
{% endfor %}
{%- endfilter %}

      - type: custom:group-element  # Footer
        visible: true
        no_toggle_hide: true
        elements_pos:
          overflow: hidden
          display: flex
          order: 2
          flex-grow: 0
          flex-shrink: 0
          align-items: center
          padding: 0 5px
          background-color: rgba(0, 0, 0, 0.45)
          color: "#D3D3D3"
        elements:
{% for switch in switches | default([]) | selectattr("show_in_footer") %}
{% set object_id = switch.entity_id.split('.')[1] %}
          - type: custom:button-card
            name: {{ switch.name }}
            entity: {{ switch.entity_id }}
            triggers_update:
              - {{ problems_entity_id }}
              {% if switch.has_power_metrics is true -%}
              - sensor.{{ object_id }}_power
              {% endif %}
            show_label: false
            show_name: false
            show_icon: true

            custom_fields:
              warning: " "

            {% if switch.has_power_metrics is true -%}
            hold_action:
              action: more-info
              entity: sensor.{{ object_id }}_power
            {% endif %}
            style:
              margin-right: {% if not loop.last %}15px{% else %}auto{% endif %}
            styles:
              card:
                - display: inline
                - overflow: visible
                - box-shadow: none
                - background-color: transparent
              grid:
                - position: relative
                - grid-template-areas: '"i" "badge"'
                - grid-template-columns: 2rem
                - grid-template-rows: 2rem 0
              img_cell:
                - display: inline
              icon:
                - width: 100%
              custom_fields:
                warning:
                  - display: |
                      [[[
                        return states['{{ problems_entity_id }}'].attributes['{{ switch.problem_key }}'] == "False"
                          ? 'block'
                          : 'none';
                      ]]]
                  - position: absolute
                  - top: -2px
                  - right: -2px
                  - width: 10px
                  - height: 10px
                  - border-radius: 50%
                  - background-color: var(--google-red-500)
{% endfor %}

{% for sensor in sensors | default([]) %}
          - type: custom:group-element
            visible: true
            no_toggle_hide: true
            elements_pos:
              margin-left: 20px
              display: flex
              flex-direction: column
              align-items: center
              justify-content: flex-end
            elements:
              - type: state-icon
                entity: {{ sensor.entity_id }}
                title: {{ sensor.name }}
                tap_action:
                  action: more-info
                style:
                  transform: scale(0.6)
              - type: state-label
                entity: {{ sensor.entity_id }}
                title: {{ sensor.name }}
                tap_action:
                  action: more-info
                style:
                  margin: -8px
{% endfor %}
